{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,0BAA0B,EAAC,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAC,cAAc,EAAC,MAAM,iBAAiB,CAAC;AAK/C,MAAM,sBAAsB,GAAG,cAAc,CAAiC,uBAAuB,CAAC,CAAA;AAEtG;;GAEG;AACH,MAAM,OAAO,qBAAsB,SAAQ,0BAA2F;IAElI;QACI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAClC,CAAC;IAED,SAAS,CAAC,MAAc;QACpB,OAAQ,IAAI,CAAC,WAA8C,CAAC,SAAS,CAAC,EAAC,MAAM,EAAE,MAAM,EAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE;YAChH,OAAO,CAAC,KAAK,CAAC,mBAAmB,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAC,IAAI,EAAC,CAAC,CAAC,QAAQ,MAAM,EAAE,CAAC,CAAA;YAC7F,OAAO,oBAAoB,CAAA;QAC/B,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;YAClB,IAAI,SAAS,CAAA;YACb,IAAI,GAAG,GAAG,UAAU,CAAA;YACpB,IAAI;gBACA,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAsB,CAAA;gBACvD,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAC,IAAI,EAAC,CAAC,CAAC,CAAA;aACzC;YAAC,OAAO,CAAC,EAAE;gBACR,SAAS,GAAG,UAAU,CAAA;aACzB;YACD,OAAO,CAAC,KAAK,CAAC,8BAA8B,MAAM,YAAY,GAAG,EAAE,CAAC,CAAA;YACpE,MAAM,SAAS,CAAA;QACnB,CAAC,CAAC,CAAA;IACN,CAAC;CAEJ;AAED,cAAc,eAAe,CAAA","sourcesContent":["import type {VehicleErrorEvent} from \"@capacitor-community/aaos-data-utils\";\nimport {RestrictedVehicleDataProxy} from \"@capacitor-community/aaos-data-utils\";\nimport {registerPlugin} from \"@capacitor/core\";\n\nimport type {VehiclePermissions, VehiclePropertyDataEvent, VehiclePropertyPluginInterface} from \"./definitions\";\n\n\nconst VehiclePropertyService = registerPlugin<VehiclePropertyPluginInterface>('VehiclePropertyPlugin')\n\n/**\n * Used for breaking up packed function arguments, automotic and central logging for calls and maybe central error handling\n */\nexport class VehiclePropertyPlugin extends RestrictedVehicleDataProxy<VehiclePropertyDataEvent, VehicleErrorEvent, VehiclePermissions> {\n\n    constructor() {\n        super(VehiclePropertyService);\n    }\n\n    quickView(dataId: number): Promise<VehiclePropertyDataEvent> {\n        return (this.dataService as VehiclePropertyPluginInterface).quickView({dataId: dataId}).then(carPropertyDataEvent => {\n            console.debug(`Received value: ${JSON.stringify(carPropertyDataEvent,null,3)} for ${dataId}`)\n            return carPropertyDataEvent\n        }).catch(errorEvent => {\n            let throwable\n            let log = errorEvent\n            try {\n                throwable = JSON.parse(errorEvent) as VehicleErrorEvent\n                log = JSON.stringify(throwable,null,3)\n            } catch (e) {\n                throwable = errorEvent\n            }\n            console.error(`Failed receiving value for ${dataId}. Reason ${log}`)\n            throw throwable\n        })\n    }\n\n}\n\nexport * from \"./definitions\"\n"]}